#!/usr/bin/env bash

exit_err() {
    [ "$1" != "" ] && echo >&2 "${1}"
    exit 1
}

awsp() {
    if [ "$1" = "" ]; then
        export AWS_PROFILE="$(aws configure list-profiles | fzy || exit_err '^C')"
    elif [ "$1" = "on" ]; then
        export PS1_AWSP="on"
    elif [ "$1" = "off" ]; then
        export PS1_AWSP=""
    fi
}

aws_ps1() {
    which aws &> /dev/null || return
    if [ "$PS1_AWSP" = "on" -a "$AWS_PROFILE" != "" ]; then
        echo "☁$AWS_PROFILE"
    elif [ "$PS1_AWSP" = "on" -a "$AWS_PROFILE" = "" ]; then
        echo "☁NOT SET"
    else
        echo ""
    fi
}

alias kubectl='kubectl --context="$KUBECTL_CONTEXT" --namespace="$KUBECTL_NAMESPACE"'

kctx() {
    if [ "$1" = "" ]; then
        export KUBECTL_CONTEXT="$(kubectl config get-contexts -o name | fzy || exit_err '^C')"
    elif [ "$1" = "save" ]; then
        kubectl config use-context $KUBECTL_CONTEXT
    elif [ "$1" = "on" ]; then
        export PS1_KCTX="on"
    elif [ "$1" = "off" ]; then
        export PS1_KCTX=""
    fi
}

kns() {
    if [ "$1" != "" ]; then
        export KUBECTL_NAMESPACE="$1"
    else
        export KUBECTL_NAMESPACE="$(kubectl get namespaces -o=custom-columns=NAME:.metadata.name | fzy || exit_err '^C')"
    fi
}

git_branch_ps1() {
    echo "$(git branch 2>/dev/null | grep -e '\* ' | sed 's/^..\(.*\)/{\1}/')"
}

get_current_namespace() {
    echo "$KUBECTL_NAMESPACE"
}

kctx_ps1() {
    which kubectl &> /dev/null || return
    if [ "$KUBECTL_CONTEXT" = "" ]; then
        export KUBECTL_CONTEXT="$(kubectl config current-context)"
    fi
    ctx="$KUBECTL_CONTEXT"

    if [ "$PS1_KCTX" = "on" -a "$ctx" != "" ]; then
        echo "⎈$ctx/$(get_current_namespace)"
    elif [ "$PS1_KCTX" = "on" -a "$ctx" = "" ]; then
        echo "⎈NOT SET"
    else
        echo ""
    fi
}

bash_prompt() {
    result=$?
    status="$result $(date +'%F %T')"
    reverse_color="\[\033[0;7m\]"
    normal_color="\[\033[0m\]"
    blue_color="\[\033[0;37;44m\]"
    green_color="\[\033[0;42m\]"
    yellow_color="\[\033[0;43m\]"
    red_color="\[\033[0;41m\]"

    if [ "$result" = "0" ]; then
        status_color=$yellow_color;
    else
        status_color=$red_color;
    fi

    PS1="$status_color${status}$reverse_color \w $green_color\$(git_branch_ps1)\
$blue_color$(kctx_ps1)$red_color$(aws_ps1)$reverse_color$(printf '\n$')$normal_color "
}

PROMPT_COMMAND=bash_prompt
